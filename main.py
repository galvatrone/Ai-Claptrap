from stt.recognize import  recognize_continuous 

import tts

import threading
import queue
import time
import re

results_queue = queue.Queue()

import torch

 # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ TTS —Å–ø–µ—Ä–≤–∞
 # –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
 # –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π –ø–æ—Ç–æ–∫ —á—Ç–æ –±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è stt —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ tss
 # —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤ –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∞ –ø–æ–∫–∞ –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å, –∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
 # –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ 
 # —á–µ–º –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –ø–∞–º—è—Ç—å
 # –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–æ–≤–æ—Ä—è—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–æ —Ç–æ –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞–∑–Ω–æ—à–æ –≥–æ–ª–æ—Å–∞ 

print("–ó–∞–≥—Ä—É–∑–∫–∞ TTS –º–æ–¥–µ–ª–∏...")
model = torch.hub.load('snakers4/silero-models', 'silero_tts', language='ru')
 # –∏–ª–∏ 'cuda', –µ—Å–ª–∏ –µ—Å—Ç—å GPU
print("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")


def recognize_background():

    while True:
        text = recognize_continuous()  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results_queue.put(text)
        if "–ø–æ–∫–∞" in text.lower():
            break

thread = threading.Thread(target=recognize_background)
thread.daemon = True
thread.start()

def process_command(cmd):
    cmd = cmd.lower()

    if "–ø–æ–∫–∞" in cmd:
        print("‚õî –ó–∞–≤–µ—Ä—à–∞–µ–º")
        tts.va_speak("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        

    elif "–ø—Ä–∏–≤–µ—Ç" in cmd:
        print("üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?")
        tts.va_speak("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?")

    elif "–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç" in cmd:
        print("üí° –ö–æ–º–∞–Ω–¥–∞: –≤–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç")
        tts.va_speak("–í–∫–ª—é—á–∞—é —Å–≤–µ—Ç.")

    elif "–æ—Ç–∫—Ä–æ–π –æ–∫–Ω–æ" in cmd:
        print("ü™ü –ö–æ–º–∞–Ω–¥–∞: –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ")
        tts.va_speak("–û—Ç–∫—Ä—ã–≤–∞—é –æ–∫–Ω–æ.")

    else:
        print(f"ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
        tts.va_speak(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {cmd}")
    
    return True

if __name__ == "__main__":
    
    print("üé§ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ì–æ–≤–æ—Ä–∏—Ç–µ '–ø—Ä–∏–≤–µ—Ç' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
    while True:
        try:
            # –∂–¥–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
            text = results_queue.get(timeout=0.5)  # –∑–¥–µ—Å—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è text, –∞ –Ω–µ cmd

        except queue.Empty:
            continue
        
        if not text.strip():
            continue
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {text}")
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ñ—Ä–∞–∑—ã-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        commands = [cmd.strip() for cmd in re.split(r'\s+–∑–∞—Ç–µ–º\s+|\s+–ø–æ—Å–ª–µ\s+|\s+–∏\s+|[.,;!?]', text) if cmd.strip()]  # –∏—Å–ø–æ–ª—å–∑—É–µ–º text, –∞ –Ω–µ cmd

        for cmd in commands:
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {cmd}")
            cmd = cmd.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if not process_command(cmd):
                exit()

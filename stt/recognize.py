import queue # –û—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
import sounddevice as sd # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
import vosk # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
import json # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON-–¥–∞–Ω–Ω—ã–º–∏
import re # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
import time # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
# import sys
# import os
# sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
# from config import VA_ALIAS  # filepath: d:\Python\New-Voice\stt\recognize.py
VA_ALIAS = ("–ø—Ä–∏—ë–º",'–∂–µ–ª–µ–∑—è–∫–∞',"–†–æ–±–æ—Ç","–ñ–µ—Å—Ç—è–Ω–∫–∞","–ñ–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫","–ñ–µ–ª–µ–∑—è–∫–∞","–ñ–µ–ª–µ–∑—è–∫–∞ –ø—Ä–∏–≤–µ—Ç","–ñ–µ–ª–µ–∑—è–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é")
SILENCE_TIMEOUT = 4  # —Å–µ–∫—É–Ω–¥

def load_model(language_code):
    if language_code == "en":
        return vosk.Model("model_en")
    elif language_code == "ru":
        return vosk.Model("model_ru" or "model_ru_v3")
    elif language_code == "gr":
        return vosk.Model("model_gr")
    else:
        raise ValueError("–Ø–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")

# language = input("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ (en/ru/de): ").strip().lower()

try:
    vosk_model = load_model("ru")
except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ Vosk:", e)
    exit(1)

q = queue.Queue()

def callback(indata, frames, time_info, status):
    if status:
        print(status)
    q.put(bytes(indata))

def split_sentences(text):
    # –ü—Ä–æ—Å—Ç–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    return re.findall(r'[^.!?]*[.!?]', text, re.DOTALL)

def recognize_continuous():
    print("üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ... (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")

    with sd.RawInputStream(samplerate=16000, blocksize=8000,
                           dtype='int16', channels=1, callback=callback):

        rec = vosk.KaldiRecognizer(vosk_model, 16000)

        

        is_active = False  # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç "—Å–ø–∏—Ç"
        buffer = ""
        full_text = ""
        last_voice_time = time.time()  # –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∏—à–∏–Ω—ã
        try:
            while True:
                data = q.get()
                if rec.AcceptWaveform(data):
                    result = json.loads(rec.Result())
                    part = result.get("text", "")

                    if not is_active:
                        continue  # –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç

                    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    for alias in VA_ALIAS:
                        if part.lower().startswith(alias):
                            part = part[len(alias):].lstrip()
                            break

                    if part:

                        part += "."
                        buffer = " " + part

                        # sentences = split_sentences(buffer)

                        # for s in sentences[:-1]:
                        #     s_clean = s.strip()
                        #     if s_clean:
                        #         print("üì• 1–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ LLM:", s_clean)
                        #         # process_with_llm(s_clean)
                                
                        print("üì• –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ LLM:", part)
                        return part.strip()
                        # process_with_llm(s_clean)
                        # buffer = sentences[-1] if sentences else ""
                        full_text += " " + buffer.strip()

                        print("üìù –û—Å—Ç–∞—Ç–æ–∫ –≤ –±—É—Ñ–µ—Ä–µ:", buffer.strip())
                else:
                    partial = json.loads(rec.PartialResult()).get("partial", "")
                    if not is_active:
                        if any(word in partial.lower() for word in VA_ALIAS):
                            print("üëÇ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚Äî –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
                            is_active = True
                            partial= ""
                            last_voice_time = time.time()
                    else:
                        if partial:
                            last_voice_time = time.time()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –∑–≤—É–∫
                            print("üß™ –ì–æ–≤–æ—Ä–∏—Ç—Å—è:", partial)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Ç–∏—à–∏–Ω—ã
                if is_active and (time.time() - last_voice_time > SILENCE_TIMEOUT):
                    print("‚è± –¢–∏—à–∏–Ω–∞ –±–æ–ª—å—à–µ", SILENCE_TIMEOUT, "—Å–µ–∫—É–Ω–¥. –ó–∞–≤–µ—Ä—à–∞–µ–º.")
                    is_active = False
                    buffer = ""
                    print("üì• [–§–ò–ù–ê–õ] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ LLM:", full_text.strip())
                    return full_text.strip()
                    full_text = ""
                    #process_with_llm(full_text.strip())

        except KeyboardInterrupt or ValueError or Exception as err:
            print("\n‚õî –ü—Ä–µ—Ä–≤–∞–Ω–æ –∞–≤–∞—Ä–∏–π–Ω–æ:")
            print(f"Unexpected {err=}, {type(err)=}")
            if buffer:
                print("üì• [–§–ò–ù–ê–õ] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞ –≤ LLM:", buffer.strip())
                # process_with_llm(buffer.strip())
            raise


recognize_continuous()